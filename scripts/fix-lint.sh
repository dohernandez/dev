#!/usr/bin/env bash

[ -z "$GO" ] && GO=go
[ -z "$LINT_PATH" ] && LINT_PATH="."
[ -z "$GCI_VERSION" ] && echo "cgi version is required" && exit 1
[ -z "$GOFUMPT_VERSION" ] && echo "gofumpt version is required" && exit 1

# detecting GOPATH and removing trailing "/" if any
GOPATH="$(go env GOPATH)"
GOPATH=${GOPATH%/}

# adding GOBIN to PATH
[[ ":$PATH:" != *"$GOPATH/bin"* ]] && PATH=$PATH:"$GOPATH"/bin

echo "Fixing imports and fmt..."

# Using the match generated code rules defined in https://golang.org/s/generatedcode
# to exclude files that were autogenerated.
SOURCES_TO_LINT=$(find "$LINT_PATH" -name '*.go' -not -path "./vendor/*" -exec grep -L '^// Code generated .* DO NOT EDIT\.$' {} \;)

# gh_repo is the variable available in gh-repo.sh that contains the long repo name. Example: github.com/ConsenSys/platform-data-pipeline
BASEDIR=$(dirname "$0")
source "$BASEDIR"/gh-repo.sh

if command -v gci >/dev/null; then
    version_installed="$(gci --version | cut -d' ' -f3)"

    version="${GCI_VERSION}"

    if [[ version == v* ]]; then
        version="${version:1}"
    fi

    if [ "${version_installed}" = "${version}" ]; then \
        echo "Running gci write..."
        gci write --Section Standard --Section Default --Section "Prefix($gh_repo)" ${SOURCES_TO_LINT}

        exit 0
    fi
elif ! command -v gci-"$GCI_VERSION" >/dev/null; then
    echo "gci $GCI_VERSION is not installed"

    exit 1
fi

echo "Running gci..."
gci-"$GCI_VERSION" write --Section Standard --Section Default --Section "Prefix($gh_repo)" ${SOURCES_TO_LINT}


if command -v gofumpt >/dev/null; then
    version_installed="$(gofumpt --version)"

    version="${GOFUMPT_VERSION}"

    if [[ version == v* ]]; then
        version="${version:1}"
    fi

    if [ "${version_installed}" = "${version}" ]; then \
        echo "Running gofumpt..."
        gofumpt -w ${SOURCES_TO_LINT}

        exit 0
    fi
elif ! command -v gofumpt-"$GOFUMPT_VERSION" >/dev/null; then
    echo "gofumpt $GOFUMPT_VERSION is not installed"

    exit 1
fi

# simplify code
echo "Running gofumpt..."
gofumpt-"$GOFUMPT_VERSION" -w ${SOURCES_TO_LINT}